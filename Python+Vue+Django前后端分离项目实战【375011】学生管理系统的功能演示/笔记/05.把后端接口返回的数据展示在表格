把后端接口返回的数据展示在表格
1. 在 index.js里面 then(function(res)语句里，添加 if, else语句

2. 在Element官网上找到 Message消息提示，选择不同状态，点击显示代码，复制'恭喜你，这是一条成功消息',的整个结构的代码，复制到index.js里的提示下面，改为‘数据加载成功！’

3. 在Element官网上找到 Message消息提示，选择不同状态，点击显示代码，复制this.$message.error('错了哦，这是一条错误消息'); 到index.js里的失败的提示下面， 改为diango里的views.py里的错误提示

4. 在index.js 里修改记录this的地址，this本来是指向const app = new Vue({ 这个生成的对象的，现在要改为 let that = this，然后把这个methods:{}括号里的this全部变为that，可以避免直接用this造成的undefined的错误

5. 运行程序时报了错误，用控制台检查，res.date 没有定义，原因是在index.js 里敲错了字母，因该是res.data

6. 问题解决后，数据就能展示在页面的表格里了

=========================================================================================================================================
实现分页展示表格数据
1. 使用前端实现数据分页的方法（也有后端实现数据分页的方法，这里采用的是前端）

2. 在index.js里定义pageStudents:[],来获取分页后当前页的学生信息

3. 在index.js里定义获取当前页的学生数据代码

4. 将获取返回记录的总行数，添加到请求成功后执行的函数里面

5. 将获取当前页的数据，添加到请求成功后执行的函数里面

6.  修改index.html里面的表格数据，将:data="students" 改为 :data="pageStudents"

7. 在Element官网上找到Pagination分页，也就是之前复制的分页那里，复制两个函数@size-change="handleSizeChange"
      @current-change="handleCurrentChange"

8.  复制到 <el-pagination 这里

9.  在index.js里添加分页时修改每页的行数的代码

===========================================================================================================================================
实现学生信息查询的后端接口
1. 在w7，django里的views.py里添加query_students(request)函数

2. 在urls.py里添加query路径，也就是查询学生信息的接口

3. axios 默认是Json格式，所有要导入json模块

4. 导入Q查询

5. ApiPost 来检验, 模拟页面访问请求，记得把settings.py里的MIDDLEWARE里的csrf那一行给注释掉

==============================================================================================================================================
完成学生信息查询的功能
1. 为了能让页面上的，查询输入的文本框起作用，需要在 index.js里面定义一个变量来接受，这里定义的是inputStr: ''

2.  然后在 index.html里的输入查询条件那一行，将 inputStr这个变量给添加进去

3.  在index.html里的查询那一行，添加一个变量，@click="queryStudents()"

4.  然后在 index.js里添加实现学生信息查询的函数

5. 在写函数代码的时候，首先是将.post, .then, .catch的框架给搭了出来

6. 在 index.html 里的全部那里，添加一个变量，@click="getAllStudents()，并在 index.js里设置这个变量

