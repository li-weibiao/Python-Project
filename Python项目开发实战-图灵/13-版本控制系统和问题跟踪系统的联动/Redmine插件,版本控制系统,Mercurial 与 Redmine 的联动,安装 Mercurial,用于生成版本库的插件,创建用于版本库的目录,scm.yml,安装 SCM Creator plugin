4.1.4  Redmine插件
Redmine有多种用来扩展功能的插件。


4.2 版本控制系统
在进行团队开发时，我们需要一个地方来集中管理和共享各成员的开发成果。
在团队开发的过程中，程序内难免混入Bug，这就需要对开发成果进行历史管理，以便追踪并掌握Bug混入的时间点。

Redmine 和 Mercurial 都是面向团队开发的工具，这里我们把它们结合在一起使用。


4.2.1 Mercurial 与 Redmine 的联动
如果让版本控制系统和问题跟踪系统两个系统联动起来，可以明确源码的变更和问题之间的对应关系。
让二者相得益彰。

如果服务器上还没有安装 Mercurial则要先安装 Mercurial，然后重启 Redmine。


4.9）安装 Mercurial
$sudo pip install mercurial
$sudo service apache2 restart

# 以管理员身份登录Redmine，设置版本控制系统
在配置界面选择“版本库”标签页，勾选“启用SCM”中的相应系统然后保存。
这样我们就可以使用选中的版本控制系统了。


4.22  用于生成版本库的插件
虽然实现版本控制系统的联动就可以了，但是我们还希望能直接从 Redmine创建版本库，这样会更加方便。
为此，我们还要安装SCM Creator plugin 并进行设置。

首先创建一个用于生成版本库的目录。这里我们用的目录为/var/lib/hg,然后更改它的所有权，让我们能从Redmine对它进行写入操作。


4.10）创建用于版本库的目录
$ sudo mkdir -p /var/lib/hg
$ sudo chown www-data:www-data /var/lib/hg/

# 然后创建设置文件/usr/share/redmine/config/scm.yml。
下例是最低限度的设置。关于设置项目的详细资料，请参考该插件的Web页面。


4.11）scm.yml
production:
        deny_delete:false
        auto_create:true
        force_repository:false
        max_repos:0
        only_creator:true
        allow_add_local:false
        allow_pickup:false
        mercurial:
                path:/var/lib/hg
                hg:/usr/local/bin/hg

# 插件的安装流程如 4.12 。需要先将下载好的插件解压到Redmine的plugins目录下，然后执行rake命令构建。


4.12）安装 SCM Creator plugin
$ sudo mkdir /usr/share/redmine/plugins
$ wget http://projects.andriylesyuk.com/attachments/download/563/redmine_scm-0.5.0b.tar.bz2
$ sudo tar xjf redmine_scm-0.5.0b.tar.bz2 -C /usr/share/redmine/plugins/
$ cd /usr/share/redmine/
$ sudo chown -R www-data:www-data plugins/redmine_scm/
$ sudo rake redmine:plugins:migrate RAILS_ENV=production
$ sudo service apache2 restart

# 重启apache2后，插件将自动加载。我们可以在页面里的配置界面里看到插件正常加载的信息。



